{"componentChunkName":"component---node-modules-gatsby-theme-dox-src-templates-doc-js","path":"/mdx-components","webpackCompilationHash":"","result":{"data":{"doc":{"id":"6e6e59e2-8bd8-54b5-b29e-5fa3b63951f2","slug":"/mdx-components","title":"","description":null,"excerpt":"MDX Components You can provide custom React components for your MDX files. Just follow the steps below: Create a  components.js  file in theâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"mdx-components\"\n  }, \"MDX Components\"), mdx(\"p\", null, \"You can provide custom React components for your MDX files. Just follow the steps below:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"components.js\"), \" file in the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"src/gatsby-theme-dox\"), \" directory.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Export an object with your custom React components.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// src/gatsby-theme-dox/navbar.yaml\\nimport components from 'gatsby-theme-dox/src/components'\\n\\nexport default {\\n  ...components // default components\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You should include the default components from the theme.\")), mdx(\"p\", null, \"Then you can use those components in your MDX files.\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"MDX Components"}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"6e6e59e2-8bd8-54b5-b29e-5fa3b63951f2","slug":"/mdx-components","previous":{"id":"e7c06e35-b9ea-5a8f-b03c-04826b49902a","slug":"/navigation"},"next":{"id":"c4778289-0605-57bb-bda1-8106db133f90","slug":"/customization"}}}}